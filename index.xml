<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>杰民的博客</title>
    <link>/</link>
    <description>Recent content on 杰民的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 20 Nov 2023 16:53:05 +0800</lastBuildDate>
    
        <atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>分布式事务seata</title>
      <link>/post/java-database-transaction-seata/</link>
      <pubDate>Mon, 20 Nov 2023 16:53:05 +0800</pubDate>
      
      <guid>/post/java-database-transaction-seata/</guid>
      
        <description>&lt;p&gt;比如我们生活中的场景：买东西结账可以使用微信支付、支付宝支付或者银行卡支付，这些交易方式就是不同的策略。&lt;/p&gt;
&lt;p&gt;那么在什么时候使用策略模式呢?&lt;/p&gt;
&lt;p&gt;在《阿里巴巴 Java 开发手册》中有提到当超过 3 层的 if-else 的逻辑判断代码可以使用策略模式来实现。&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://s4.51cto.com/oss/202102/01/bcfacfccdd813e45f33725f66f9003d2.jpg&#34;&gt;&lt;img src=&#34;https://ossjiemin.oss-cn-hangzhou.aliyuncs.com/2023/bcfacfccdd813e45f33725f66f9003d2.jpg&#34; alt=&#34;img&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;在 Spring 中实现策略模式的方式有很多种，下面通过一个案例来演示下，比如有个需求需要实现支持第三方登录，目前需要支持以下三种登录方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微信登录&lt;/li&gt;
&lt;li&gt;QQ 登录&lt;/li&gt;
&lt;li&gt;微博登录&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面将通过策略模式来实现这个需求，其中策略模式结构如下图所示：&lt;/p&gt;
&lt;p&gt;策略模式结构如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://s6.51cto.com/oss/202102/01/a624f41fb66a521e8225f8a521c48fae.jpg&#34;&gt;&lt;img src=&#34;https://ossjiemin.oss-cn-hangzhou.aliyuncs.com/2023/a624f41fb66a521e8225f8a521c48fae.jpg&#34; alt=&#34;img&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;策略模式结构&lt;/p&gt;
&lt;p&gt;主要包括一个登录接口类和几种登录方式的实现方式，并利用简单工厂来获取对应的处理器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;定义策略接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;首先定义一个登录的策略接口 LoginHandler，其中包括两个方法：&lt;/p&gt;
&lt;p&gt;获取策略类型的方法&lt;/p&gt;
&lt;p&gt;处理策略逻辑的方法&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public interface LoginHandler&amp;lt;T extends Serializable&amp;gt; { 
 
    /** 
     * 获取登录类型 
     * 
     * @return 
     */ 
    LoginType getLoginType(); 
 
    /** 
     * 登录 
     * 
     * @param request 
     * @return 
     */ 
    LoginResponse&amp;lt;String, T&amp;gt; handleLogin(LoginRequest request); 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，LoginHandler 的 getLoginType 方法用来获取登录的类型 (即策略类型)，用于根据客户端传递的参数直接获取到对应的策略实现。&lt;/p&gt;
&lt;p&gt;客户端传递的相关参数都被封装为 LoginRequest，传递给 handleLogin 进行处理。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Data 
public class LoginRequest { 
 
    private LoginType loginType; 
 
    private Long userId; 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;其中，根据需求定义登录类型枚举如下：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;public enum LoginType { 
    QQ, 
    WE_CHAT, 
    WEI_BO; 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;实现策略接口&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在定义好策略接口后，我们就需要根据各种第三方登录来实现对应的处理逻辑就可以了。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;微信登录&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Component 
public class WeChatLoginHandler implements LoginHandler&amp;lt;String&amp;gt; { 
 
    private final Logger logger = LoggerFactory.getLogger(this.getClass()); 
 
    /** 
     * 获取登录类型 
     * 
     * @return 
     */ 
    @Override 
    public LoginType getLoginType() { 
        return LoginType.WE_CHAT; 
    } 
 
    /** 
     * 登录 
     * 
     * @param request 
     * @return 
     */ 
    @Override 
    public LoginResponse&amp;lt;String, String&amp;gt; handleLogin(LoginRequest request) { 
        logger.info(&amp;#34;微信登录：userId：{}&amp;#34;, request.getUserId()); 
        String weChatName = getWeChatName(request); 
        return LoginResponse.success(&amp;#34;微信登录成功&amp;#34;, weChatName); 
    } 
 
    private String getWeChatName(LoginRequest request) { 
        return &amp;#34;wupx&amp;#34;; 
    } 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;QQ 登录&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Component 
public class QQLoginHandler implements LoginHandler&amp;lt;Serializable&amp;gt; { 
 
    private final Logger logger = LoggerFactory.getLogger(this.getClass()); 
 
    /** 
     * 获取登录类型 
     * 
     * @return 
     */ 
    @Override 
    public LoginType getLoginType() { 
        return LoginType.QQ; 
    } 
 
    /** 
     * 登录 
     * 
     * @param request 
     * @return 
     */ 
    @Override 
    public LoginResponse&amp;lt;String, Serializable&amp;gt; handleLogin(LoginRequest request) { 
        logger.info(&amp;#34;QQ登录：userId：{}&amp;#34;, request.getUserId()); 
        return LoginResponse.success(&amp;#34;QQ登录成功&amp;#34;, null); 
    } 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;微博登录&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Component 
public class WeiBoLoginHandler implements LoginHandler&amp;lt;Serializable&amp;gt; { 
 
    private final Logger logger = LoggerFactory.getLogger(this.getClass()); 
 
    /** 
     * 获取登录类型 
     * 
     * @return 
     */ 
    @Override 
    public LoginType getLoginType() { 
        return LoginType.WEI_BO; 
    } 
 
    /** 
     * 登录 
     * 
     * @param request 
     * @return 
     */ 
    @Override 
    public LoginResponse&amp;lt;String, Serializable&amp;gt; handleLogin(LoginRequest request) { 
        logger.info(&amp;#34;微博登录：userId：{}&amp;#34;, request.getUserId()); 
        return LoginResponse.success(&amp;#34;微博登录成功&amp;#34;, null); 
    } 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;创建策略的简单工厂&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Component 
public class LoginHandlerFactory implements InitializingBean, ApplicationContextAware { 
    private static final Map&amp;lt;LoginType, LoginHandler&amp;lt;Serializable&amp;gt;&amp;gt; LOGIN_HANDLER_MAP = new EnumMap&amp;lt;&amp;gt;(LoginType.class); 
    private ApplicationContext appContext; 
 
    /** 
     * 根据登录类型获取对应的处理器 
     * 
     * @param loginType 登录类型 
     * @return 登录类型对应的处理器 
     */ 
    public LoginHandler&amp;lt;Serializable&amp;gt; getHandler(LoginType loginType) { 
        return LOGIN_HANDLER_MAP.get(loginType); 
    } 
 
    @Override 
    public void afterPropertiesSet() throws Exception { 
        // 将 Spring 容器中所有的 LoginHandler 注册到 LOGIN_HANDLER_MAP 
        appContext.getBeansOfType(LoginHandler.class) 
                .values() 
                .forEach(handler -&amp;gt; LOGIN_HANDLER_MAP.put(handler.getLoginType(), handler)); 
    } 
 
    @Override 
    public void setApplicationContext(ApplicationContext applicationContext) throws BeansException { 
        appContext = applicationContext; 
    } 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;我们让 LoginHandlerFactory 实现 InitializingBean 接口，在 afterPropertiesSet 方法中，基于 Spring 容器将所有 LoginHandler 自动注册到 LOGIN_HANDLER_MAP，从而 Spring 容器启动完成后， getHandler 方法可以直接通过 loginType 来获取对应的登录处理器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;创建登录服务&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在登录服务中，我们通过 LoginHandlerFactory 来获取对应的登录处理器，从而处理不同类型的第三方登录：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Service 
public class LoginServiceImpl implements LoginService { 
    @Autowired 
    private LoginHandlerFactory loginHandlerFactory; 
 
    @Override 
    public LoginResponse&amp;lt;String, Serializable&amp;gt; login(LoginRequest request) { 
        LoginType loginType = request.getLoginType(); 
        // 根据 loginType 找到对应的登录处理器 
        LoginHandler&amp;lt;Serializable&amp;gt; loginHandler = 
                loginHandlerFactory.getHandler(loginType); 
        // 处理登录 
        return loginHandler.handleLogin(request); 
    } 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Factory 只负责获取 Handler，Handler 只负责处理具体的登录，Service 只负责逻辑编排，从而达到功能上的低耦合高内聚。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;写一个 Controller：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@RestController 
public class LoginController { 
 
    @Autowired 
    private LoginService loginService; 
 
    /** 
     * 登录 
     */ 
    @PostMapping(&amp;#34;/login&amp;#34;) 
    public LoginResponse&amp;lt;String, Serializable&amp;gt; login(@RequestParam LoginType loginType, @RequestParam Long userId) { 
        LoginRequest loginRequest = new LoginRequest(); 
        loginRequest.setLoginType(loginType); 
        loginRequest.setUserId(userId); 
        return loginService.login(loginRequest); 
    } 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;然后用 Postman 测下下：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://s6.51cto.com/oss/202102/01/18b004d1bd14b885b2119b1eb696d359.jpg&#34;&gt;&lt;img src=&#34;https://ossjiemin.oss-cn-hangzhou.aliyuncs.com/2023/18b004d1bd14b885b2119b1eb696d359.jpg&#34; alt=&#34;img&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;微信登录&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://s4.51cto.com/oss/202102/01/c4bc45e131c57632cea9038e2e3c6ff4.jpg&#34;&gt;&lt;img src=&#34;https://ossjiemin.oss-cn-hangzhou.aliyuncs.com/2023/c4bc45e131c57632cea9038e2e3c6ff4.jpg&#34; alt=&#34;img&#34;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;QQ 登录&lt;/p&gt;
&lt;p&gt;是不是很简单呢? 如果需求又要加需求，需要支持 GitHub 第三方登录。&lt;/p&gt;
&lt;p&gt;此时我们只需要添加一个新的策略实现，然后在登录枚举中加入对应的类型即可：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;@Component 
public class GitHubLoginHandler implements LoginHandler&amp;lt;Serializable&amp;gt; { 
 
    private final Logger logger = LoggerFactory.getLogger(this.getClass()); 
 
    /** 
     * 获取登录类型 
     * 
     * @return 
     */ 
    @Override 
    public LoginType getLoginType() { 
        return LoginType.GIT_HUB; 
    } 
 
    /** 
     * 登录 
     * 
     * @param request 
     * @return 
     */ 
    @Override 
    public LoginResponse&amp;lt;String, Serializable&amp;gt; handleLogin(LoginRequest request) { 
        logger.info(&amp;#34;GitHub登录：userId：{}&amp;#34;, request.getUserId()); 
        return LoginResponse.success(&amp;#34;GitHub登录成功&amp;#34;, null); 
    } 
} 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此时不需要修改任何代码 ，因为 Spring 容器重启时会自动将 GitHubLoginHandler 注册到 LoginHandlerFactory 中，使用 Spring 实现策略模式就是这么简单，还不快学起来!&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>How to Learning a Skill</title>
      <link>/post/how-to-learning-a-skill/</link>
      <pubDate>Wed, 15 Nov 2023 15:22:09 +0800</pubDate>
      
      <guid>/post/how-to-learning-a-skill/</guid>
      
        <description>&lt;p&gt;在学习某个技术的时候，除了会用到的知识图，还会问自己很多个为什么。于是，就形成了一个更高层的知识脑图。下面把这个学习方法或者学习模板分享出来。当然学习一门技术时，Go 语言也好，Docker 也好，只有把这个学习模板中的内容都填实了，才善罢甘休。这个模板如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;这个技术出现的背景、初衷和要达到什么样的目标或是要解决什么样的问题。这个问题非常关键，也就是说，你在学习一个技术的时候，需要知道这个技术的成因和目标，也就是这个技术的灵魂。如果不知道这些的话，那么你会看不懂这个技术的一些设计理念。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这个技术的优势和劣势分别是什么，或者说，这个技术的 trade-off 是什么。任何技术都有其好坏，在解决一个问题的时候，也会带来新的问题。另外，一般来说，任何设计都有 trade-off（要什么和不要什么），所以，你要清楚这个技术的优势和劣势，以及带来的挑战。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;这个技术适用的场景。任何技术都有其适用的场景，离开了这个场景，这个技术可能会有很多槽点，所以学习技术不但要知道这个技术是什么，还要知道其适用的场景。没有任何一个技术是普适的。注意，所谓场景一般分别两个，一个是业务场景，一个是技术场景。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;技术的组成部分和关键点。这是技术的核心思想和核心组件了，也是这个技术的灵魂所在了。学习技术的核心部分是快速掌握的关键。&lt;/p&gt;
&lt;p&gt;技术的底层原理和关键实现。任何一个技术都有其底层的关键基础技术，这些关键技术很有可能也是其它技术的关键基础技术。所以，学习这些关键的基础底层技术，可以让你未来很快地掌握其它技术。可以参看我在 CoolShell 上写的 Docker 底层技术那一系列文章。&lt;/p&gt;
&lt;p&gt;已有的实现和它之间的对比。一般来说，任何一个技术都会有不同的实现，不同的实现都会有不同的侧重。学习不同的实现，可以让你得到不同的想法和思路，对于开阔思维，深入细节是非常重要的。&lt;/p&gt;
&lt;p&gt;基本上来说，如果按照上面所提的这 6 大点来学习一门技术，一定会学习到技术的精髓，而且学习的高度在一开始就超过很多人了。如果能这样坚持 2-3 年，相信一定会在某个领域成为炙手可热的佼佼者。&lt;/p&gt;
&lt;p&gt;The Pyramid Learning
以阅读为例，从浅到深依次为：听书、自己读书、自己读书 + 摘抄金句、自己读书 + 思维导图/读书笔记、自己读书 + 践行操练、自己读书 + 践行操练 + 输出教授。&lt;/p&gt;
&lt;p&gt;见下图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ossjiemin.oss-cn-hangzhou.aliyuncs.com/2023/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20231115153554.png&#34; alt=&#34;学习路径&#34;&gt;&lt;/p&gt;
&lt;p&gt;The Pyramid Learning with reading
自学路上，书籍为伴，务必要提高自己的阅读效率。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Linux Shell Notebook</title>
      <link>/post/2023/11/08/linux-shell-notebook/</link>
      <pubDate>Wed, 08 Nov 2023 15:22:26 +0800</pubDate>
      
      <guid>/post/2023/11/08/linux-shell-notebook/</guid>
      
        <description>&lt;h1 id=&#34;工作中常用linux-脚本命令&#34;&gt;工作中常用linux 脚本命令&lt;/h1&gt;
&lt;p&gt;比如在服务器上，需要批量删除服务器上停用掉的容器。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34; id=&#34;hl-0-1&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#hl-0-1&#34;&gt;1&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;docker ps -a  -f &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;Exited=0&amp;#39;&lt;/span&gt;  |awk &lt;span style=&#34;color:#4070a0&#34;&gt;&amp;#39;NR != 1 {print $1}&amp;#39;&lt;/span&gt;|xargs docker rm
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;命令解释： -f 过滤容器中状态为退出的容器
awk 打印第一列，不是第一行
xargs 用上一个管道的输出作为当前命令的参数&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Spring Starter Nexus Repository Skill Stack</title>
      <link>/post/2023/11/08/spring-starter-nexus-repository-skill-stack/</link>
      <pubDate>Wed, 08 Nov 2023 10:08:55 +0800</pubDate>
      
      <guid>/post/2023/11/08/spring-starter-nexus-repository-skill-stack/</guid>
      
        <description>&lt;h1 id=&#34;spring-boot-starter封装编写和仓库存储&#34;&gt;spring-boot starter封装编写和仓库存储&lt;/h1&gt;
&lt;p&gt;starter进行很好的代码复用，减少spring框架集成到系统里复杂的配置。编写starter能很好了解boot原理，更好的复用代码.&lt;/p&gt;
&lt;h2 id=&#34;写在前面&#34;&gt;写在前面&lt;/h2&gt;
&lt;p&gt;spring几大特性理解：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;IOC和DI支持&lt;/li&gt;
&lt;li&gt;AOP切面编程支持&lt;/li&gt;
&lt;li&gt;声明式事务支持&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;阅读spring源码&#34;&gt;阅读spring源码&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;Spring 框架是模块化的，每一个模块都可以在应用中独立应用。包括 Core Container, Data Access, Web, AOP, Instumentation And Test。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下分两部分来阅读Spring&lt;/p&gt;
&lt;h3 id=&#34;第一部分-core-container&#34;&gt;第一部分： Core Container&lt;/h3&gt;
&lt;p&gt;核心容器包括 Beans、Core、Context以及EL模块. Core和Beans包含DI和IOC特性。&lt;/p&gt;
&lt;h3 id=&#34;第二部分-the-framework&#34;&gt;第二部分： The FrameWork&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Data Access/Integrations&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Aspect Oriented Programming (AOP)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring’s MVC&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Spring Test&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Object XML Mapping&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dependency Injection (DI)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>安装hugo静态博客</title>
      <link>/post/install-hugo-as-my-blog-site/</link>
      <pubDate>Tue, 07 Nov 2023 17:32:19 +0800</pubDate>
      
      <guid>/post/install-hugo-as-my-blog-site/</guid>
      
        <description>&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;最近急需要一个博客系统，通过资料调研。从之前博客园到wordpress再到之前的githubIO形式，都没能好好的坚持使用下来。最近看到一位博主的&lt;a href=&#34;https://soulteary.com/&#34;&gt;博客&lt;/a&gt;，很受震撼，慢慢积累吧。在自己的服务器上来部署一个博客。&lt;/p&gt;
&lt;h2 id=&#34;安装scoop&#34;&gt;安装scoop&lt;/h2&gt;
&lt;p&gt;步骤一：打开powershell 执行策略更改：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34; id=&#34;hl-0-1&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#hl-0-1&#34;&gt;1&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007020&#34;&gt;Set-ExecutionPolicy&lt;/span&gt; -ExecutionPolicy RemoteSigned -Scope CurrentUser
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;p&gt;步骤二： 安装scoop&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34; id=&#34;hl-1-1&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#hl-1-1&#34;&gt;1&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#007020&#34;&gt;irm &lt;/span&gt;get.scoop.sh | &lt;span style=&#34;color:#007020&#34;&gt;iex
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;hugo安装&#34;&gt;Hugo安装&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34; id=&#34;hl-2-1&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#hl-2-1&#34;&gt;1&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;scoop install hugo
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;站点新建&#34;&gt;站点新建&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;-webkit-user-select:none;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34; id=&#34;hl-3-1&#34;&gt;&lt;a style=&#34;outline:none;text-decoration:none;color:inherit&#34; href=&#34;#hl-3-1&#34;&gt;1&lt;/a&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f0f0;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmd&#34; data-lang=&#34;cmd&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;hugo new site ./ -f yml
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;h2 id=&#34;添加主题&#34;&gt;添加主题&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;git clone https://github.com/adityatelange/hugo-PaperMod themes/PaperMod --depth=1
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;新建日志&#34;&gt;新建日志&lt;/h2&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo new posts/first-blog.md
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;当文档编写完成，修改头部draft字段为false.&lt;/p&gt;
&lt;h2 id=&#34;启动-hugo服务&#34;&gt;启动 hugo服务&lt;/h2&gt;
&lt;p&gt;hugo server -D&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>关于杰民和 m.jiemin.xyz</title>
      <link>/about/</link>
      <pubDate>Wed, 01 Nov 2023 00:00:00 +0000</pubDate>
      
      <guid>/about/</guid>
      
        <description>
&lt;link rel=&#34;stylesheet&#34; href=&#34;/css/hugo-easy-gallery.css&#34; /&gt;
&lt;div class=&#34;box&#34;&gt;
&lt;figure  itemprop=&#34;associatedMedia&#34;
  itemscope itemtype=&#34;http://schema.org/ImageObject&#34; &gt;
    &lt;div class=&#34;img&#34;&gt;
      &lt;img itemprop=&#34;thumbnail&#34; src=&#34;/me.jpg&#34; /&gt;
    &lt;/div&gt;
    &lt;a href=&#34;/me.jpg&#34; itemprop=&#34;contentUrl&#34;&gt;&lt;/a&gt;
  &lt;/figure&gt;
&lt;/div&gt;

&lt;p&gt;你好！我叫杰民，好高兴你能找到这儿，这是我的个人站点。这个站点的域名是 &lt;code&gt;m.jiemin.xyz&lt;/code&gt; ，我名字的拼音 &lt;code&gt;jiemin&lt;/code&gt; ，再加上 &lt;code&gt;.xyz&lt;/code&gt; 后缀。&lt;/p&gt;
&lt;h2 id=&#34;关于我&#34;&gt;关于我&lt;/h2&gt;
&lt;p&gt;我目前是一名后端程序员，在重庆一家网络公司做开发工作。&lt;/p&gt;
&lt;p&gt;我是一个觉得代码有趣，并打算把写代码作为事业奋斗一辈子的普通程序员。在完成事情的过程中，喜欢追求最优解，是轻微代码洁癖患者。&lt;/p&gt;
&lt;h2 id=&#34;建站理由&#34;&gt;建站理由&lt;/h2&gt;
&lt;p&gt;吾从小学开始到现在工作阶段，心里时常会出现对某些知识点似懂非懂的感觉，知识一直在学，也一直在遗忘，也曾尝试去梳理，最开始手写去整理，结果笔记本也是经常丢，自己写的字迹又有些潦草，因此也就扔到了废纸堆；接着使用一些思维导图软件去整理自己的知识点，用着效果还不错，包括我每次制作PPT、做项目，也都是用思维导图构筑这样的一个架构，再去做事情就显得简单易上手。&lt;/p&gt;
&lt;p&gt;后来也是发现部分知识点是需要一个详细的过程去梳理，可能是配合图的一段文字，因此又学习了 Markdown 配合 XMind 使用，效果很不错，但仍未用大量时间做出太多梳理。&lt;/p&gt;
&lt;p&gt;这次使用 Hugo 静态博客搭建这样一个简单的个人网站,其主要目的还是想对自己所学所思做一个系统的整理,总结一下大致有这些&lt;strong&gt;原因&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将自己过往所思所学梳理成一个完整的知识架构，而不是现在脑子混乱的状态&lt;/li&gt;
&lt;li&gt;借用网站这种公开性质形式对自己起到督促作用，而不是现在内心慵懒的状态&lt;/li&gt;
&lt;li&gt;借用此形式培养自己一个愿意写时常记的好习惯，而不是现在双手呆滞的状态&lt;/li&gt;
&lt;li&gt;将自己的所学知识与别人分享，也收获别人反馈，而不是现在全身闭环的状态&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;知识需要管理&#34;&gt;知识需要管理&lt;/h2&gt;
&lt;p&gt;信息不经过整理分析就储存起来完全没有作用，一定要分析才储存，并建立简单有效的回溯机制。  信息经过：“收集、整理、分析、储存、搜索”这个5个步骤才能在未来帮助你决策，信息才会变成智慧。  图像是最容易理解的方式，所以要学会用图像来呈现你想了解或表达的事物。图像也会让隐性知识显性话。  学会用纸＋笔比软件效率更高。  所有收获与人分享&lt;/p&gt;
&lt;h2 id=&#34;断舍离&#34;&gt;断舍离&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;https://ossjiemin.oss-cn-hangzhou.aliyuncs.com/2023/image-20231109140717382.png&#34; alt=&#34;image-20231109140717382&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://ossjiemin.oss-cn-hangzhou.aliyuncs.com/2023/image-20231109140746247.png&#34; alt=&#34;image-20231109140746247&#34;&gt;&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
